libxmp version 3.9.4

This is an experimental release of libxmp. The API can be modified until
the 4.0 stable release.

Check http://xmp.sf.net/api.html for the current API reference. Better
documentation will be included in the stable relase. Also check the xmp.h
header file and the xmp player front-end.

A simple example on how to use this library:

-----

xmp_context ctx;		/* context handle */
struct xmp_module_info info;	/* struct to hold module info */

ctx = xmp_create_context();

xmp_load_module(ctx, filename);		/* load the module file */

xmp_player_start(ctx, 44100, 0);	/* play the module file */
while (xmp_player_frame(ctx) == 0) {
	xmp_player_get_info(&info);
	/* audio buffer in info.buffer and info.buffer_size */
}
xmp_player_end(ctx);			/* end the module player */

xmp_release_module(ctx);		/* unload module */
xmp_free_context(ctx);

-----

A player context can load and play a single module at a time. Multiple
contexts can be defined if needed.

Use xmp_test_module() to check if the file is a valid module and retrieve 
the module name and type. Use xmp_load_module() to fully load the module
to memory. These two calls return 0 on success or <0 in case of error. Error
codes are:

  -XMP_ERROR_INTERNAL   /* Internal error */
  -XMP_ERROR_FORMAT     /* Unsupported module format */
  -XMP_ERROR_LOAD       /* Error loading file */
  -XMP_ERROR_DEPACK     /* Error depacking file */
  -XMP_ERROR_SYSTEM     /* System error */

If a system error occurs, the specific error is set in errno.

Parameters to xmp_player_start() are the sampling rate (up to 48kHz)
and a bitmapped integer holding one or more of the following mixer flags:

  XMP_MIX_8BIT          /* Mix to 8-bit instead of 16 */
  XMP_MIX_UNSIGNED      /* Mix to unsigned samples */
  XMP_MIX_MONO          /* Mix to mono instead of stereo */
  XMP_MIX_NEAREST       /* Mix using nearest neighbor interpolation */
  XMP_MIX_NOFILTER      /* Disable lowpass filter */

After xmp_player_start() is called, each call to xmp_player_frame() will
render an audio frame.  Call xmp_player_get_info() to retrieve the buffer
address and size. xmp_player_frame() returns 0 on success or -1 if replay
should stop.

Use xmp_player_end(), xmp_release_module() and xmp_free_context() to
release memory and end replay.

