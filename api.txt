Libxmp API documentation
========================

Introduction
------------

Libxmp is a module player library supporting many mainstream and obscure
module formats including Protracker MOD, Scream Tracker III S3M and
Impulse Tracker IT. Libxmp loads the module and renders the sound as
linear PCM samples in a buffer at rate and format specified by the user,
one frame at a time (standard modules usually play at 50 frames per second).

Possible applications for libxmp include stand-alone module players, module
player plugins for other players, module information extractors, background
music replayers for games and other applications, module-to-mp3 renderers, etc.


Concepts
--------

* **Player context:**
  Most libxmp functions require a handle that identifies the module player
  context. Each context is independent and multiple contexts can be defined
  simultaneously.

* **Sequence:**
  Each group of positions in the order list that loops over itself, also
  known as "subsong". Most modules have only one sequence, but some modules,
  especially modules used in games can have multiple sequences. "Hidden
  patterns" outside the main song are also listed as extra sequences, certain
  module authors such as Skaven commonly place extra patterns at the end of
  the module.


A simple example
----------------

This example loads a module, plays it at 44.1kHz and writes it to a raw
sound file:

    #include <stdio.h>
    #include <stdlib.h>
    #include <xmp.h>
    
    int main(int argc, char **argv)
    {
        xmp_context c;
        struct xmp_module_info mi;
        FILE *f;
    
        /* The output raw file */
        f = fopen("out.raw", "wb");
        if (f == NULL) {
            fprintf(stderr, "can't open output file\n");
            exit(EXIT_FAILURE);
        }
    
        /* Create the player context */
        c = xmp_create_context();
    
        /* Load our module */
        if (xmp_load_module(c, argv[1]) != 0) {
            fprintf(stderr, "can't load module\n");
            exit(EXIT_FAILURE);
        }
    
        /* Play the module */
        xmp_player_start(c, 44100, 0);
        while (xmp_player_frame(c) == 0) {
            xmp_player_get_info(c, &mi);
    
            if (mi.loop_count > 0)    /* exit before looping */
                break;
    
            fwrite(mi.buffer, mi.buffer_size, 1, f);  /* write audio data */
        }
        xmp_player_end(c);
        xmp_release_module(c);        /* unload module */
        xmp_free_context(c);          /* destroy the player context */
    
        fclose(f);
    
        exit(EXIT_SUCCESS);
    }


A player context can load and play a single module at a time. Multiple
contexts can be defined if needed.

Use `xmp_test_module()` to check if the file is a valid module and retrieve
the module name and type. Use `xmp_load_module()` to fully load the module
to memory. These two calls return 0 on success or <0 in case of error. Error
codes are:

    -XMP_ERROR_INTERNAL   /* Internal error */
    -XMP_ERROR_FORMAT     /* Unsupported module format */
    -XMP_ERROR_LOAD       /* Error loading file */
    -XMP_ERROR_DEPACK     /* Error depacking file */
    -XMP_ERROR_SYSTEM     /* System error */

If a system error occurs, the specific error is set in errno.

Parameters to `xmp_player_start()` are the sampling rate (up to 48kHz)
and a bitmapped integer holding one or more of the following mixer flags:

    XMP_MIX_8BIT          /* Mix to 8-bit instead of 16 */
    XMP_MIX_UNSIGNED      /* Mix to unsigned samples */
    XMP_MIX_MONO          /* Mix to mono instead of stereo */
    XMP_MIX_NEAREST       /* Mix using nearest neighbor interpolation */
    XMP_MIX_NOFILTER      /* Disable lowpass filter */

After `xmp_player_start()` is called, each call to `xmp_player_frame()` will
render an audio frame.  Call `xmp_player_get_info()` to retrieve the buffer
address and size. `xmp_player_frame()` returns 0 on success or -1 if replay
should stop.

Use  `xmp_player_end()`, `xmp_release_module()` and `xmp_free_context()` to
release memory and end replay.


API reference
-------------

### Version and player information ###

**`const char *xmp_version`**

> A string containing the library version, such as "4.0.0".


**`const unsigned int xmp_vercode`**

> The library version encoded in a integer value. Bits 23-16 contain the
  major version number, bits 15-8 contain the minor version number, and
  bits 7-0 contain the release number.


**`char **xmp_get_format_list()`**


### Context creation ###

**`xmp_context xmp_create_context()`**

> Create a new player context and return an opaque handle to be used in
> subsequent accesses to this context.

> **Returns:** the player context handle.


**`void xmp_free_context(xmp_context c)`**

> Destroy a player context previously created using `xmp_create_context()`
>
> **Parameters:**
>
>  _c_: the player context handle.


### Module loading ###

**`int xmp_test_module(char *path, struct xmp_test_info *test_info)`**

**`int xmp_load_module(xmp_context c, char *path)`**

> Load a module into the specified player context.
>
> **Parameters:**
>
> _c_: the player context handle.
>
> _path_: pathname of the module to load.
>
> **Returns:** 0 if sucessful, or a negative error code in case of error.
  Error codes can be `XMP_ERROR_FORMAT` in case of an unrecognized file
  format, `XMP_ERROR_DEPACK` if the file is compressed and uncompression
  failed, `XMP_ERROR_LOAD` if the file format was recognized but the
  file loading failed, or `XMP_ERROR_SYSTEM` in case of a system error
  (the system error code is set in `errno`).

**`void xmp_release_module(xmp_context c)`**


### Module playing ###

**`int xmp_player_start(xmp_context c, int rate, int format)`**

**`int xmp_player_frame(xmp_context)`**

**`void xmp_player_get_info(xmp_context c, struct xmp_module_info *info)`**

**`void xmp_player_end(xmp_context c)`**

**`void xmp_inject_event(xmp_context, int, struct xmp_event *)`**

**`int xmp_next_position(p)`**

**`int xmp_prev_position(p)`**

**`int xmp_set_position(p,x)`**

**`int xmp_stop_module(p)`**

**`int xmp_restart_module(p)`**

**`int xmp_seek_time(p,x)`**

**`int xmp_channel_mute(p,x,y)`**


### Mixer parameter setting ###

**`int xmp_mixer_amp(p,x)`**

**`int xmp_mixer_mix(p,x)`**

